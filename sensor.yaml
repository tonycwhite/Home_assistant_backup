#############
# sensor:   #
#############

  - platform: yr
  - platform: darksky
    api_key: 8d4f537bcf3b30bcc653ebe1cbf6614c
    monitored_conditions:
      - summary
      - nearest_storm_distance
      - temperature
      - humidity
      - precip_probability
      - precip_intensity
      - wind_speed
      - pressure
      - wind_bearing
      - apparent_temperature
      - icon

  - platform : mqtt
    name: "lounge Temperature"
    state_topic: "tele/lounge_lamp/SENSOR"
    value_template: "{{ value_json['DHT22'].Temperature }}"
    unit_of_measurement: "Â°C"

  - platform: mqtt
    name: "Lounge Humidity"
    state_topic: "tele/lounge_lamp/SENSOR"
    value_template: "{{ value_json['DHT22'].Humidity }}"
    unit_of_measurement: "%"

  - platform : mqtt
    name: "OutDoor Temperature"
    state_topic: "tele/Central_Heating/SENSOR"
    value_template: "{{ value_json['DHT11'].Temperature }}"
    unit_of_measurement: "Â°C"
    
  - platform: mqtt
    name: "Outdoor Humidity"
    state_topic: "tele/Central_Heating/SENSOR"
    value_template: "{{ value_json['DHT11'].Humidity }}"
    unit_of_measurement: "%"

  # - platform : mqtt
    # name: "Front Door Battery level"
    # state_topic: "stat/door/front/battery"
    # unit_of_measurement: "%"

  # - platform : mqtt
    # name: "Cabinet IP Address"
    # state_topic: "tele/Cabinet_Lights/INFO2"
    # value_template: '{{ value_json.IPaddress }}'


    

##################
# speedtest ######
##################

      
      
      ##############
      #  time   #
      ###########

  - platform: time_date
    display_options:
      - 'time'
      - 'date'
#      - 'date_time'
#      - 'time_date'
#      - 'time_utc'
#      - 'beat'

##################
# battery status #
##################

  - platform: template
    sensors:
       battery_tonesfone:
        unit_of_measurement: '%'
        value_template: '{{ states.device_tracker.tony_tonesfone.attributes.battery|round }}'
       battery_lelsfone:
        unit_of_measurement: '%'
        value_template: '{{ states.device_tracker.tony_lelsfone.attributes.battery|round }}' 
        
        
  - platform: template
    sensors:
      target_temp:
       unit_of_measurement: '&deg C'
       value_template: '{{ states.climate.lounge.attributes.temperature}}'       
        
        
#########################
#  system monitoring   ## 
#########################        
     
            
            
            
##############################
#  heating test ##############
##############################

 
 
 ##############################
 #  Google Travel Time   #
 #########################

# home place id ChIJgWdwKsfsbEgRzjb_Yu1qles 
 

  - platform: google_travel_time
    name: Tony to Home
    api_key: !secret Google_Api 
    origin: device_tracker.tony_tonesfone
    destination: zone.home 

  - platform: google_travel_time
    name: Tony to Work
    api_key: !secret Google_Api 
    origin: device_tracker.tony_tonesfone
    destination: zone.tonys_work_home 
  
  - platform: google_travel_time
    name: Lels to Home
    api_key: !secret Google_Api 
    origin: device_tracker.tony_lelsfone
    destination: zone.home 

  - platform: google_travel_time
    name: Jessica to Home
    api_key: !secret Google_Api 
    origin: device_tracker.tony_jess
    destination: zone.home
    options:
      mode: walking    
      
      
      
 ##################################
# Heating mode sensor   ###########
###################################

#sensor:
  - platform: template
    sensors:
      current_heating_mode:
        friendly_name: "Heating mode"
        value_template: >-
          {% if is_state('binary_sensor.workday_today', 'on') and
          (states.sensor.time.state >= states.input_select.weekday_morn_on.state ) and (states.sensor.time.state <= states.input_select.weekday_morn_off.state)
          %} Morning
          {%- elif is_state('binary_sensor.workday_today', 'on') and
          (states.sensor.time.state >= states.input_select.weekday_morn_off.state ) and (states.sensor.time.state <= states.input_select.weekday_eve_on.state)
          -%} Between Cycles
          {%- elif is_state('binary_sensor.workday_today', 'on') and
          (states.sensor.time.state >= states.input_select.weekday_eve_on.state ) and (states.sensor.time.state <= states.input_select.weekday_eve_off.state)
          -%} Evening
          {%- elif
          is_state('states.binary_sensor.workday_today', 'off')  and
          (states.sensor.time.state >= states.input_select.weekend_morn_on.state ) and 
          (states.sensor.time.state <= states.input_select.weekend_morn_off.state)
          -%} Morning
          {%- elif 
          is_state('states.binary_sensor.workday_today', 'off') and
          ( states.sensor.time.state >= states.input_select.weekend_morn_off.state ) and (  states.sensor.time.state <= states.input_select.weekend_eve_on.state)
          -%} Between Cycles
          {% elif 
          is_state('states.binary_sensor.workday_today', 'off') and
          (states.sensor.time.state >= states.input_select.weekend_eve_on.state ) and 
          (states.sensor.time.state <= states.input_select.weekend_eve_off.state)
          %} Evening
          {% else %}
          Between Cycles
          {% endif %}
























 
      
    
 